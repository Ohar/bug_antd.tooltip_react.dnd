import globals from 'globals'
import eslint from '@eslint/js'
import tsEslint from 'typescript-eslint'

import pluginReact from 'eslint-plugin-react'
import pluginCypress from 'eslint-plugin-cypress'
import pluginUnusedImports from 'eslint-plugin-unused-imports'
import pluginReactRefresh from 'eslint-plugin-react-refresh'
import pluginPerfectionist from 'eslint-plugin-perfectionist'
import pluginStylistic from '@stylistic/eslint-plugin'
import pluginReactRedux from 'eslint-plugin-react-redux'

export default tsEslint.config(
  {
    files: ['**/*.{js,mjs,cjs,ts,jsx,tsx}'],
    ignores: [
      'dist/**/*.ts',
      'dist/**',
      'public/**',
      'e2e/**',
      'cypress/**',
      'eslint.config.mjs',
      'cypress.config.ts'
    ],
    languageOptions: {
      globals: globals.browser,
      parserOptions: {
        projectService: true,
        tsconfigRootDir: import.meta.dirname,
      },
    },
    extends: [
      eslint.configs.recommended,
      ...tsEslint.configs.strictTypeChecked,
      ...tsEslint.configs.stylisticTypeChecked,
    ],
    plugins: {
      react: pluginReact,
      cypress: pluginCypress,
      perfectionist: pluginPerfectionist,
      'react-redux': pluginReactRedux,
      'unused-imports': pluginUnusedImports,
      'react-refresh': pluginReactRefresh,
      '@stylistic': pluginStylistic,
    },
    rules: {
      'no-redeclare': 'off',
      'quote-props': ["error", "as-needed"],
      'no-console': ['warn', { allow: ['warn', 'error', 'info'] }],
      'no-duplicate-imports': 'error',
      'react/react-in-jsx-scope': 'off',
      'react/jsx-wrap-multilines': ['error', {
        "declaration": "parens-new-line",
        "assignment": "parens-new-line",
        "return": "parens-new-line",
        "arrow": "parens-new-line",
        "condition": "parens-new-line",
        "logical": "parens-new-line",
        "prop": "parens-new-line"
      }],
      'react/prop-types': 'off',
      'react/jsx-curly-brace-presence': [
        'error',
        { props: 'never', children: 'never' },
      ],
      "no-unused-vars": "off",
      "unused-imports/no-unused-imports": "error",
      "unused-imports/no-unused-vars": [
        "warn",
        {
          "vars": "all",
          "varsIgnorePattern": "^_",
          "args": "after-used",
          "argsIgnorePattern": "^_",
        },
      ],
      "@typescript-eslint/consistent-type-definitions": ["error", "type"],
      '@typescript-eslint/no-unsafe-enum-comparison': 'error',
      '@typescript-eslint/no-deprecated': 'off',
      '@typescript-eslint/no-unsafe-assignment': 'error',
      '@typescript-eslint/prefer-promise-reject-errors': 'off',
      '@typescript-eslint/no-dynamic-delete': 'off',
      '@typescript-eslint/no-unnecessary-type-parameters': 'off',
      '@typescript-eslint/no-redeclare': 'off',
      '@typescript-eslint/no-invalid-void-type': 'off',
      '@typescript-eslint/no-unused-expressions': 'off',
      '@typescript-eslint/use-unknown-in-catch-callback-variable': 'off',
      '@typescript-eslint/prefer-for-of': 'off',
      '@typescript-eslint/no-unnecessary-condition': 'off',
      '@typescript-eslint/prefer-nullish-coalescing': 'off',
      '@typescript-eslint/no-non-null-assertion': 'off',
      '@typescript-eslint/no-non-null-asserted-optional-chain': 'off',
      '@typescript-eslint/no-extra-semi': 'off',
      '@typescript-eslint/no-namespace': 'off',
      '@typescript-eslint/restrict-template-expressions': 'off',
      "@typescript-eslint/consistent-type-imports": [
        "error",
        {
          prefer: 'type-imports',
          fixStyle: 'inline-type-imports',
        }
      ],
      '@typescript-eslint/no-misused-promises': [
        'error',
        {
          checksVoidReturn: false,
        },
      ],
      '@stylistic/no-multiple-empty-lines': ['error', { max: 1 }],
      '@stylistic/no-multi-spaces': 'error',
      '@stylistic/no-trailing-spaces': 'error',
      '@stylistic/indent': ['error', 2],
      '@stylistic/quotes': ['error', 'single'],
      '@stylistic/object-curly-spacing': ['error', 'always'],
      '@stylistic/quote-props': ['error', 'as-needed'],
      '@stylistic/arrow-parens': ['error', 'as-needed'],
      'react-refresh/only-export-components': ['warn', {
        'allowConstantExport': true,
      }],
      'perfectionist/sort-jsx-props': [
        'error',
        {
          type: 'natural',
          order: 'asc',
          groups: [
            'key',
            'ref',
            'min',
            'max',
            'start',
            'end',
            'from',
            'to',
            'width',
            'height',
            'width',
            'height',
            'shorthand',
            'unknown',
            'multiline',
            'style',
            'render',
            'callback',
          ],
          customGroups: {
            key: 'key',
            ref: 'ref',
            min: 'min*',
            max: 'max*',
            start: 'start*',
            finish: 'finish*',
            end: 'end*',
            from: 'from*',
            to: 'to*',
            width: 'width',
            height: 'height',
            render: 'render*',
            style: 'style',
            callback: 'on*',
          },
        },
      ],
      'perfectionist/sort-imports': [
        'error',
        {
          type: 'natural',
          order: 'asc',
          groups: [
            'type',
            'react',
            [
              'testingLibrary',
              'vitest',
              'axios',
              'react-router-dom',
              '@reduxjs',
            ],
            ['builtin', 'external'],
            'internal-type',
            'internal',
            ['parent-type', 'sibling-type', 'index-type'],
            ['parent', 'sibling', 'index'],
            'side-effect',
            'style',
            'object',
            'unknown',
          ],
          customGroups: {
            value: {
              react: ['react', 'react-dom*'],
              testingLibrary: '@testing-library/*',
              vitest: 'vitest',
              axios: 'axios',
              'react-router-dom': 'react-router-dom',
              '@reduxjs': '@reduxjs/*',
            },
            type: {
              react: 'react',
            },
          },
          newlinesBetween: 'always',
        },
      ],
      'perfectionist/sort-objects': [
        'error',
        {
          type: 'natural',
          order: 'asc',
          groups: [
            'query',
            'path',
            'min',
            'max',
            'start',
            'end',
            'from',
            'to',
            'width',
            'height',
            'unknown',
            'render',
            'onMutateCallback',
            'callback',
          ],
          customGroups: {
            min: 'min*',
            max: 'max*',
            start: 'start*',
            finish: 'finish*',
            end: 'end*',
            from: 'from*',
            to: 'to*',
            width: 'width',
            height: 'height',
            query: 'query',
            path: 'path',
            render: 'render*',
            onMutateCallback: 'onMutate',
            callback: 'on*',
          },
        },
      ],
      'perfectionist/sort-object-types': [
        'error',
        {
          type: 'natural',
          order: 'asc',
          groups: [
            'min',
            'max',
            'start',
            'end',
            'from',
            'to',
            'width',
            'height',
            'unknown',
            'render',
            'callback',
          ],
          customGroups: {
            min: 'min*',
            max: 'max*',
            start: 'start*',
            finish: 'finish*',
            end: 'end*',
            from: 'from*',
            to: 'to*',
            width: 'width',
            height: 'height',
            render: 'render*',
            callback: 'on*',
          },
        },
      ],
      'perfectionist/sort-interfaces': [
        'error',
        {
          type: 'natural',
          order: 'asc',
          groups: [
            'min',
            'max',
            'start',
            'end',
            'from',
            'to',
            'width',
            'height',
            'unknown',
            'multiline',
            'render',
            'callback',
          ],
          customGroups: {
            min: 'min*',
            max: 'max*',
            start: 'start*',
            finish: 'finish*',
            end: 'end*',
            from: 'from*',
            to: 'to*',
            width: 'width',
            height: 'height',
            callback: 'on*',
            render: 'render*',
          },
        },
      ],
      'perfectionist/sort-union-types': [
        'error',
        {
          type: 'natural',
          order: 'asc',
        },
      ],
    },
  }
)
